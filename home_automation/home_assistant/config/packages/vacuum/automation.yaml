# automation:
  - alias: AUT-Notify Vacuum Error
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum
        to: error
      - platform: state
        entity_id:
          - sensor.home_occupancy_status
        to: 'Home'
        for:
          minutes: 2
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: vacuum.xiaomi_vacuum
          state: error
    action:
      - service: homeassistant.turn_on
        entity_id: script.notify_in_home_or_all
        data:
          variables:
            title: 'Something fail in the vacuum...'
            message: 'Error was: `{{state_attr("vacuum.xiaomi_vacuum", "error")}}`'

  - alias: AUT-Vacuum
    initial_state: 'on'
    trigger:
      - platform: time
        at: '11:28:00'
      # Check if we can start before
      - platform: time
        at: '10:20:00'
      # Try to exec vacuum if Away from 5 minutes
      - platform: state
        entity_id:
          - sensor.home_occupancy_status
        to: "Away"
        for: "00:05:00"
    condition:
      - condition: and
        conditions:
      # Check if decent hours
          - condition: time
            after: "10:00:00"
            before: "22:30:00"
            # after: input_datetime.house_silent_hours_start
            # before: input_datetime.house_silent_hours_end
      # Not cleaning just now
          - condition: template
            value_template: '{{ states("vacuum.xiaomi_vacuum") == "docked" }}'
      # Someone in house in past 24 hours
          - condition: template
            value_template: '{{ states("sensor.home_occupancy_status") != "Extended Away" }}'
      # Check frequency of cleaning
          - condition: or
            conditions:
            # Not executed in last 23 hours and someone in house
              - condition: and
                conditions:
                  - condition: template
                    value_template: '{{ ( as_timestamp(now()) - as_timestamp(states("input_datetime.vacuum_last_full_clean")) |int(0) ) /60/60 > 23 }}'
            # Not executed in last 13 hours and empty house
              - condition: and
                conditions:
                  - condition: template
                    value_template: '{{ ( as_timestamp(now()) - as_timestamp(state_attr("input_datetime.vacuum_last_full_clean")) |int(0) ) /60/60 > 13 }}'
                  - condition: state
                    entity_id: sensor.home_occupancy_status
                    state:
                      - "Extended Away"
                      - "Away"

    action:
      - service: vacuum.set_fan_speed
        entity_id: vacuum.xiaomi_vacuum
        data:
          fan_speed: Standard
      - service: vacuum.start
        entity_id: vacuum.xiaomi_vacuum
      - service: notify.manolo
        data_template: &message-vacuum-started
          title: "*Start to clean*"
          message: 'Vacuum started by automation `AUT-Vacuum`'

  - alias: AUT-Vacuum update statistics
    mode: restart
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum
        to: returning
    action:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.vacuum_xiaomi_dust_clean_left
          value: >
            {{ [(states('input_number.vacuum_xiaomi_dust_clean_left')|int) - (state_attr('vacuum.xiaomi_vacuum', 'cleaned_area')|int), 0] | max }}
    # We considered a full cleaning if we clean more than 17 m2
      - condition: numeric_state
        entity_id: vacuum.xiaomi_vacuum
        attribute: cleaned_area
        above: 17
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.vacuum_last_full_clean
        data:
          datetime: "{{ now().strftime('%Y-%m-%d %H:%M:%S') }}"
      - service: notify.manolo
        data_template:
          title: "*Update square metter*"
          message: 'The next square metters to delete from total is: `{{state_attr("vacuum.xiaomi_vacuum", "cleaned_area")}}`'

  - alias: AUT-Notify Vacuum maintenance
    mode: restart
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum
        to: returning
      - platform: state
        entity_id: input_number.vacuum_xiaomi_dust_clean_left
    # This must be only send when someone come home
    condition:
      - condition: template
        value_template: >
          {%- set minimal_notify = 2 -%}
          {{ 
              (states('input_number.vacuum_xiaomi_dust_clean_left')|int) < minimal_notify
          }}
    action:
      - service: notify.manolo
        data_template: &message-vacuum-maintenance
          title: "*Vacuum need maintenance*"
          message: >
            Cepillo principal*:* `{{ (state_attr('vacuum.xiaomi_vacuum', 'main_brush_left')|int) }} h` _restantes_

            Cepillo lateral: `{{ (state_attr('vacuum.xiaomi_vacuum', 'side_brush_left')|int) }} h` restantes

            Filtro: `{{ (state_attr('vacuum.xiaomi_vacuum', 'filter_left')|int) }} h` restantes

            Limpieza de sensores: `{{ (state_attr('vacuum.xiaomi_vacuum', 'sensor_dirty_left')|int) }} h` restantes

            Vaciado del deposito: `{{ (states('input_number.vacuum_xiaomi_dust_clean_left')|int) }} mÂ²` restantes


            _(Recuerda_ [resetear](http://192.168.200.7:8123/lovelace/2) _el estado del deposito tras cada vaciado)_
      - service: notify.monica
        data_template: *message-vacuum-maintenance
