# automation:
  - alias: AUT-Notify Vacuum Error
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum
        to: error
      - platform: state
        entity_id:
          - sensor.home_occupancy_status
        to: 'Home'
        for:
          minutes: 2
    condition:
      condition: and
      conditions:
        - condition: state
          entity_id: vacuum.xiaomi_vacuum
          state: error
    action:
      - service: homeassistant.turn_on
        entity_id: script.notify_in_home_or_all
        data:
          title: 'Something fail in the vacuum...'
          message: 'Error was: `{{state_attr("vacuum.xiaomi_vacuum", "error")}}`'

  - alias: AUT-Vacuum
    initial_state: 'on'
    trigger:
      - platform: time
        at: '12:32:00'
      - platform: time
        at: '11:28:00'
      # Check if we can start before
      - platform: time
        at: '10:20:00'
      # Try to exec vacuum if Away from 5 minutes
      - platform: state
        entity_id:
          - sensor.home_occupancy_status
        to: "Away"
        for: "00:05:00"
    condition:
      - condition: and
        conditions:
      # Check if decent hours
          - condition: or
            conditions:
            # Check if decent hours in working days
              - condition: and
                conditions:
                  - condition: state
                    entity_id: binary_sensor.workday_sensor
                    state: "on"
                  - condition: time
                    after: "10:00:00"
                    before: "22:30:00"
                    # after: input_datetime.house_silent_hours_start
                    # before: input_datetime.house_silent_hours_end
            # Check if decent hours in not working days
              - condition: and
                conditions:
                  - condition: state
                    entity_id: binary_sensor.workday_sensor
                    state: "off"
                  - condition: time
                    after: "11:30:00"
                    before: "22:30:00"
      # Not cleaning just now
          - condition: template
            value_template: '{{ states("vacuum.xiaomi_vacuum") == "docked" }}'
      # Someone in house in past 24 hours
          - condition: template
            value_template: '{{ states("sensor.home_occupancy_status") != "Extended Away" }}'
      # Check frequency of cleaning
          - condition: or
            conditions:
            # Not executed in last 23 hours and someone in house
              - condition: and
                conditions:
                  - condition: template
                    value_template: '{{ ( as_timestamp(now()) - as_timestamp(states("input_datetime.vacuum_last_full_clean")) |int(0) ) /60/60 > 23 }}'
            # Not executed in last 13 hours and empty house
              - condition: and
                conditions:
                  - condition: template
                    value_template: '{{ ( as_timestamp(now()) - as_timestamp(states("input_datetime.vacuum_last_full_clean")) |int(0) ) /60/60 > 13 }}'
                  - condition: state
                    entity_id: sensor.home_occupancy_status
                    state:
                      - "Extended Away"
                      - "Away"

    action:
      # If someone in house, we should send a notification and create a timer and start after the notification isn't answered or timer cancelled
      - service: timer.start
        entity_id: timer.vacuum_start_in
        data:
          duration: "00:05:00"
      - service: homeassistant.turn_on
        entity_id: script.notify_in_home_or_all
        data:
          title: 'Vacuum is going to start'
          message: >
            Vacuum is going to start in 5 minutes.
          data:
            inline_keyboard:
              - 'ðŸš« Stop it ðŸš«:/vacuum_stop, âœ… Start now:/vacuum_start'

  - alias: AUT-Vacuum start
    initial_state: 'on'
    trigger:
      - platform: event
        event_type: timer.finished
        event_data:
          entity_id: timer.vacuum_start_in
      - platform: event
        event_type: telegram_command
        event_data: &telegram_vacuum_start
          command: "/vacuum_start"
      - platform: event
        event_type: telegram_callback
        event_data: *telegram_vacuum_start
    action:
      - service: vacuum.set_fan_speed
        entity_id: vacuum.xiaomi_vacuum
        data:
          fan_speed: Standard
      - service: vacuum.start
        entity_id: vacuum.xiaomi_vacuum

  - alias: AUT-Vacuum update statistics
    mode: restart
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum
        to: returning
    action:
        # If we have the same start time than before obviously we are trying to update the same values
      - condition: template
        value_template: "{{ as_timestamp(states('sensor.xiaomi_vacuum_last_clean_start')) != as_timestamp(states('input_datetime.vacuum_last_full_clean')) }}"
      - service: input_number.set_value
        data_template:
          entity_id: input_number.vacuum_xiaomi_dust_clean_left
          value: >
            {{ [(states('input_number.vacuum_xiaomi_dust_clean_left')|int) - (states('sensor.xiaomi_vacuum_last_clean_area')|int), 0] | max }}
    # We considered a full cleaning if we clean more than 17 m2
      - condition: numeric_state
        entity_id: sensor.xiaomi_vacuum_last_clean_area
        above: 17
      - service: input_datetime.set_datetime
        target:
          entity_id: input_datetime.vacuum_last_full_clean
        data:
          datetime: "{{ states('sensor.xiaomi_vacuum_last_clean_start') }}"
      ## Wait until map fully updated
      - delay: '00:00:21'
      - service: script.take_camera_snapshot_and_send_telegram
        data:
          camera_entity: camera.xiaomi_vacuum_map
          notify_to: script.notify_in_home_or_all
          message: |
            *Clean finished !*
            Today (`{{ now().strftime("%Y-%m-%d %H:%M") }}`), `{{states("sensor.xiaomi_vacuum_last_clean_area")}}` square meters have been cleaned

  - alias: AUT-Notify Vacuum maintenance
    mode: restart
    initial_state: 'on'
    trigger:
      - platform: state
        entity_id: vacuum.xiaomi_vacuum
        to: returning
      - platform: state
        entity_id: input_number.vacuum_xiaomi_dust_clean_left
    # This must be only send when someone come home
    condition:
      - condition: template
        value_template: >
          {%- set minimal_notify = 2 -%}
          {{ 
              (states('input_number.vacuum_xiaomi_dust_clean_left')|int) < minimal_notify
          }}
    action:
      - service: homeassistant.turn_on
        entity_id: script.notify_in_home_or_all
        data:
          title: 'Vacuum need maintenance'
          message: >
            Cepillo principal*:* `{{ (states('sensor.xiaomi_vacuum_main_brush_left')|int) }} h` _restantes_

            Cepillo lateral: `{{ (states('sensor.xiaomi_vacuum_side_brush_left')|int) }} h` restantes

            Filtro: `{{ (states('sensor.xiaomi_vacuum_filter_left')|int) }} h` restantes

            Limpieza de sensores: `{{ (states('sensor.xiaomi_vacuum_sensor_dirty_left')|int) }} h` restantes

            Vaciado del deposito: `{{ (states('input_number.vacuum_xiaomi_dust_clean_left')|int) }} mÂ²` restantes
          data:
            inline_keyboard:
              - 'Vacuum already cleaned:/vacuum_cleaned'

  - alias: AUT-Telegram reset Vacuum meters
    mode: restart
    initial_state: 'on'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data: &telegram_vacuum_cleaned
          command: "/vacuum_cleaned"
      - platform: event
        event_type: telegram_callback
        event_data: *telegram_vacuum_cleaned
    action:
      - service: input_number.set_value
        data_template:
          entity_id: input_number.vacuum_xiaomi_dust_clean_left
          value: >
            {{ state_attr('input_number.vacuum_xiaomi_dust_clean_left', 'max')|int }}
      # Answer to the telegram callback if needed
      - condition: template
        value_template: "{{  trigger.event.event_type == 'telegram_callback' }}"
      - service: telegram_bot.answer_callback_query
        data:
          callback_query_id: "{{ trigger.event.data.id }}"
          message: "Done!"

  - alias: AUT-Telegram stop Vacuum
    mode: restart
    initial_state: 'on'
    trigger:
      - platform: event
        event_type: telegram_command
        event_data: &telegram_vacuum_stop
          command: "/vacuum_stop"
      - platform: event
        event_type: telegram_callback
        event_data: *telegram_vacuum_stop
    action:
      - service: timer.cancel
        target:
          entity_id: timer.vacuum_start_in
      - service: vacuum.stop
        entity_id: vacuum.xiaomi_vacuum
      - delay: '00:00:30'
      - service: vacuum.return_to_base
        entity_id: vacuum.xiaomi_vacuum
