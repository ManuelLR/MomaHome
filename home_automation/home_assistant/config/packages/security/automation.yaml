# automation:
  - alias: AUT-New device found
    id: AUT-New_Device_Found
    initial_state: 'on'
    mode: parallel
    triggers:
      - platform: event
        event_type: device_tracker_new_device
    actions:
      - service: script.notify_in_home_or_all
        data: &data-alert-new-device
          title: 'ALERT: New device found !'
          message: 'New device called `{{ trigger.event.data.host_name }}` with MAC `{{ trigger.event.data.mac }}` found'
      - service: notify.manolo
        data: *data-alert-new-device

  - alias: AUT-Notify failed login attempt
    id: AUT-Notify_Failed_Login_Attempt
    initial_state: 'on'
    mode: parallel
    triggers:
      - platform: state
        entity_id: persistent_notification.http_login
    conditions:
      - condition: template
        value_template: "{{ trigger.to_state.state != 'None' }}"
    actions:
      service: notify.manolo
      data:
        title: "*{{ state_attr('persistent_notification.http_login', 'title') }} !*"
        message: "{{ state_attr('persistent_notification.http_login', 'message') }}"

  - alias: AUT-Notify ip_banned
    id: AUT-Notify_IP_Banned
    initial_state: 'on'
    mode: parallel
    triggers:
      - platform: state
        entity_id: persistent_notification.ip_ban
    conditions:
      - condition: template
        value_template: "{{ trigger.to_state.state != 'None' }}"
    actions:
      - alias: "Set variables"
        variables:
            # Extracted from a message like: Too many login attemps from xxx.xxx.xxx.xxx
          banned_ip: "{{ state_attr('persistent_notification.ip_ban', 'message').split(' ') | last }}"
      - service: notify.manolo
        data:
          title: "*{{ state_attr('persistent_notification.ip_ban', 'title') }} !*"
          message: "{{ state_attr('persistent_notification.ip_ban', 'message') }}"
          data:
            inline_keyboard:
              - 'Unban {{ banned_ip }} and restart Home Assistant:/unban_ip {{ banned_ip }}'

  - alias: AUT-Unban IP
    id: AUT-Unban_IP
    mode: restart
    initial_state: 'on'
    triggers:
      - platform: event
        id: event_telegram_command
        event_type: telegram_command
        event_data: &telegram_unban_ip_device
          command: "/unban_ip"
        variables:
          ip_to_unban: "{{ trigger.event.data['args'][0] }}"
      - platform: event
        id: event_telegram_callback
        event_type: telegram_callback
        event_data: *telegram_unban_ip_device
        variables:
          ip_to_unban: "{{ trigger.event.data['data'].split(' ')[1] }}"
    actions:
      - service: shell_command.unban_ip
        data:
          ip_to_unban: "{{ ip_to_unban }}"
      - if: "{{ trigger.id == 'event_telegram_callback' }}"
        then:
          - service: telegram_bot.answer_callback_query
            data:
              callback_query_id: "{{ trigger.event.data.id }}"
              message: "Unbanned and restarting HomeAssistant"
      - service: homeassistant.restart

  - alias: AUT-Notify Entrance Door Opened
    id: AUT-Notify_Entrance_Door_Opened
    initial_state: 'on'
    triggers:
      - platform: state
        entity_id: binary_sensor.entrance_door_sensor_opened
        to: 'on'
    actions:
      - service: notify.manolo
        data:
          title: '[Debug] *Door Opened*'
          message: 'The entrance door has been opened.'
          data:
            disable_notification: True

  - alias: AUT-Notify Entrance Door Opened Extended Away
    id: AUT-Notify_Entrance_Door_Opened_Extended_Away
    initial_state: 'on'
    triggers:
      - platform: state
        entity_id: binary_sensor.entrance_door_sensor_opened
        to: 'on'
    conditions:
      - condition: state
        entity_id: sensor.home_occupancy_status
        state:
          - 'Extended Away'
          # Some times after 'Extended Away', we have race condition so temporarily we should add that state
          - 'Just Arrived'
    actions:
      - service: script.notify_in_home_or_all
        data:
          title: 'Alert: Door Opened'
          message: 'The entrance door has been opened while the house is in Extended Away mode.'

  - alias: AUT-Notify Entrance Door Opened Too much time
    id: AUT-Notify_Entrance_Door_Opened_Too_Much_Time
    initial_state: 'on'
    triggers:
      - platform: state
        entity_id: binary_sensor.entrance_door_sensor_opened
        to: 'on'
        for: '00:03:00'
    actions:
      - service: script.notify_in_home_or_all
        data:
          title: 'Alert: Door Left Open'
          message: 'The entrance door has been left open for more than 3 minutes.'

  - alias: AUT-Notify Centinel Mode on Extended Away
    id: AUT-Notify_Centinel_Mode_On_Extended_Away
    initial_state: 'on'
    triggers:
      - platform: state
        entity_id: sensor.home_occupancy_status
        to: 'Extended Away'
    actions:
      - service: input_boolean.turn_on
        target:
          entity_id: input_boolean.centinel_mode
      - service: script.notify_in_home_or_all
        data:
          title: 'Centinel Mode'
          message: 'Centinel Mode has been enabled automatically due to Extended Away status.'
          data:
            inline_keyboard:
              - 'Disable Centinel Mode:/disable_centinel_mode'

  - alias: AUT-Disable Centinel Mode
    id: AUT-Disable_Centinel_Mode
    mode: restart
    initial_state: 'on'
    triggers:
      - platform: event
        event_type: telegram_command
        event_data: &telegram_disable_centinel_mode
          command: "/disable_centinel_mode"
      - platform: event
        event_type: telegram_callback
        event_data: *telegram_disable_centinel_mode
    actions:
      - service: input_boolean.turn_off
        target:
          entity_id: input_boolean.centinel_mode
      - service: script.notify_in_home_or_all
        data:
          title: 'Centinel Mode'
          message: 'Centinel Mode has been disabled.'
      # Answer to the telegram callback if needed
      - condition: template
        value_template: "{{ trigger.event.event_type == 'telegram_callback' }}"
      - service: telegram_bot.answer_callback_query
        data:
          callback_query_id: "{{ trigger.event.data.id }}"
          message: "Done!"

  - alias: AUT-Centinel Mode Door Camera Recording
    id: AUT-Centinel_Mode_Door_Camera_Recording
    initial_state: 'on'
    triggers:
      - platform: state
        entity_id: binary_sensor.entrance_door_sensor_opened
        to: 'on'
    variables:
      trigger_time: "{{ now().strftime('%Y%m%d_%H%M%S') }}"
    conditions:
      - condition: state
        entity_id: input_boolean.centinel_mode
        state: 'on'
    actions:
      - parallel:
        - service: script.notify_in_home_or_all
          data:
            title: 'Alert: Door Opened - Starting Video Recording'
            message: "The entrance door has been opened at {{ trigger_time }} while Centinel Mode is active. Starting video recordings."
        - sequence:
          # Immediate 4s recording
          - service: camera.record
            target:
              entity_id: camera.entrance_camera
            data:
              duration: 4
              lookback: 4
              filename: "/tmp/homeassistant/camera_recordings/entrance_{{ trigger_time }}_4s.mp4"
          - service: script.notify_in_home_or_all
            data:
              title: 'Door Recording - 4s'
              message: 'First video recording (4s) completed.'
              data:
                video:
                  - file: "/tmp/homeassistant/camera_recordings/entrance_{{ trigger_time }}_4s.mp4"
                    caption: "Recording #{{ trigger_time }} (4s)"

      # Unfortunatelly, we can't use the camera.record_video service in parallel.
      - sequence:
        # Start 5s recording after previous record from door opening
        - service: camera.record
          target:
            entity_id: camera.entrance_camera
          data:
            duration: 5
            # lookback: 8
            filename: "/tmp/homeassistant/camera_recordings/entrance_{{ trigger_time }}_5s.mp4"
        - service: script.notify_in_home_or_all
          data:
            title: 'Door Recording - 5s'
            message: 'Second video recording (5s) completed.'
            data:
              video:
                - file: "/tmp/homeassistant/camera_recordings/entrance_{{ trigger_time }}_8s.mp4"
                  caption: "Continuation recording #{{ trigger_time }} (5s)"
      - sequence:
        # Start 25s recording from previous recording
        - service: camera.record
          target:
            entity_id: camera.entrance_camera
          data:
            duration: 25
            # duration: 30
            lookback: 20
            filename: "/tmp/homeassistant/camera_recordings/entrance_{{ trigger_time }}_25s.mp4"
        - service: script.notify_in_home_or_all
          data:
            title: 'Door Recording - 25s'
            message: 'Final video recording (25s) completed.'
            data:
              video:
                - file: "/tmp/homeassistant/camera_recordings/entrance_{{ trigger_time }}_25s.mp4"
                  caption: "Continuation recording #{{ trigger_time }} (25s)"
      # Clean old recordings
      - service: shell_command.delete_old_camera_recordings

  # Simulate presence with light patterns
  - alias: AUT-Centinel Mode Light Control - Sunset
    id: AUT-Centinel_Mode_Light_Control_Sunset
    initial_state: 'on'
    triggers:
      - platform: sun
        event: sunset
    conditions:
      - condition: state
        entity_id: input_boolean.centinel_mode
        state: 'on'
    actions:
      - delay:
          minutes: "{{ range(0, 30) | random }}"
      - service: light.turn_on
        target:
          entity_id: group.centinel_mode_lights
        data:
          brightness: "{{ range(180, 255) | random }}"

  - alias: AUT-Centinel Mode Light Control - Night Off
    id: AUT-Centinel_Mode_Light_Control_Night_Off
    initial_state: 'on'
    triggers:
      - platform: time
        at: '23:00:00'
    conditions:
      - condition: state
        entity_id: input_boolean.centinel_mode
        state: 'on'
    actions:
      - delay:
          minutes: "{{ range(0, 59) | random }}"
      - service: light.turn_off
        target:
          entity_id: group.centinel_mode_lights
